/* 
 * Copyright (C) 2016 Johannes Wilke
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.freebooth.photobooth;

import com.freebooth.utilities.PathCreator;
import java.awt.Color;
import java.awt.Font;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.prefs.Preferences;
import javax.swing.BorderFactory;
import com.freebooth.mailWizard.MailConfig;
import com.freebooth.onlineMode.MailWorkerDirect;

/**
 *
 * @author johannes
 */
public class SaveDialog extends javax.swing.JDialog {

    boolean firstTime;
    String imageName;
    Process proc;
    Preferences prefs;
    Preferences onlinePrefs;
    PhotoboothFrame pf;

    public SaveDialog() {
    }

    /**
     * Creates new form SaveDialog
     *
     * @param parent
     * @param modal
     * @param imageName
     */
    public SaveDialog(java.awt.Frame parent, boolean modal, String imageName, PhotoboothFrame pf) {
        super(parent, modal);
        this.pf = pf;
        prefs = Preferences.userNodeForPackage(PhotoboothFrame.class);
        onlinePrefs = Preferences.userNodeForPackage(ShareOptionsPanel.class);
        getContentPane().setBackground(Color.decode(prefs.get("background_color", "#333333")));
        setUndecorated(true);
        getRootPane().setBorder(BorderFactory.createLineBorder(Color.decode(prefs.get("button_color", "#ED5E2F"))));

        initComponents();
        List<javax.swing.JButton> buttonList = new ArrayList<>();
        buttonList.add(jButton3);
        buttonList.add(jButton5);

        for (javax.swing.JButton button : buttonList) {
            button.setOpaque(true);
            button.setBackground(Color.decode(prefs.get("button_color", "#ED5E2F")));
            button.setForeground(Color.decode(prefs.get("button_foreground", "#ffffff")));
            Font font = button.getFont();
            button.setFont(new Font(font.getName(), font.getStyle(), prefs.getInt("button_font_size", 20)));
        }
        jLabel1.setForeground(Color.decode(prefs.get("text_color", "#ffffff")));
        jLabel2.setForeground(Color.decode(prefs.get("text_color", "#ffffff")));
        pack();
        setLocationRelativeTo(parent);
        this.imageName = imageName;

        if (onlinePrefs.getBoolean("onlineMode", false)) {
            jLabel1.setText(java.util.ResourceBundle.getBundle("properties/Bundle").getString("SaveDialog.jLabel1.onlineText"));
            jButton3.setText(java.util.ResourceBundle.getBundle("properties/Bundle").getString("SaveDialog.jButton3.textOnline"));
        }

        //System.out.println(this.imageName);
        setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("properties/Bundle"); // NOI18N
        setTitle(bundle.getString("SaveDialog.title_1")); // NOI18N
        setAlwaysOnTop(true);
        setBackground(java.awt.Color.gray);
        setForeground(java.awt.Color.white);
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(600, 300));
        setModal(true);
        setPreferredSize(new java.awt.Dimension(600, 300));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 10, 0};
        layout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0};
        getContentPane().setLayout(layout);

        jLabel1.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText(bundle.getString("SaveDialog.jLabel1.text_1")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        jButton3.setBackground(new java.awt.Color(64, 64, 64));
        jButton3.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jButton3.setForeground(java.awt.Color.white);
        jButton3.setText(bundle.getString("SaveDialog.jButton3.text_1")); // NOI18N
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.setFocusPainted(false);
        jButton3.setOpaque(true);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        getContentPane().add(jButton3, gridBagConstraints);

        jTextField2.setBackground(java.awt.Color.lightGray);
        jTextField2.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        jTextField2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextField2.setPreferredSize(new java.awt.Dimension(400, 50));
        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField2FocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 60;
        getContentPane().add(jTextField2, gridBagConstraints);

        jLabel2.setForeground(java.awt.Color.white);
        jLabel2.setText(bundle.getString("SaveDialog.jLabel2.text_1")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        getContentPane().add(jLabel2, gridBagConstraints);

        jButton5.setBackground(new java.awt.Color(50, 50, 50));
        jButton5.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jButton5.setForeground(java.awt.Color.white);
        jButton5.setText(bundle.getString("SaveDialog.jButton5.text_1")); // NOI18N
        jButton5.setToolTipText(bundle.getString("SaveDialog.jButton5.toolTipText_1")); // NOI18N
        jButton5.setBorderPainted(false);
        jButton5.setContentAreaFilled(false);
        jButton5.setFocusPainted(false);
        jButton5.setOpaque(true);
        jButton5.setPreferredSize(new java.awt.Dimension(160, 28));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        getContentPane().add(jButton5, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (onlinePrefs.getBoolean("onlineMode", false)) {
            MailConfig config = new MailConfig(onlinePrefs.get("mail_provider", ""),
                    onlinePrefs.get("mail_username", ""),
                    onlinePrefs.get("mail_password", ""),
                    onlinePrefs.get("mail_mail", ""),
                    onlinePrefs.get("mail_message", java.util.ResourceBundle.getBundle("properties/Bundle").getString("MailConfigFrame.editText.text")),
                    onlinePrefs.get("mail_subject", java.util.ResourceBundle.getBundle("properties/Bundle").getString("MailConfigFrame.editSubject.text")),
                    onlinePrefs.get("mail_encryption", "SSL"),
                    onlinePrefs.get("mail_host", ""),
                    onlinePrefs.getInt("mail_port", 0),
                    onlinePrefs.getBoolean("sendWatermarked", true));
            String[] mails = jTextField2.getText().split(",");
            ArrayList<String> mailList = new ArrayList<>();
            ArrayList<String> images = new ArrayList<>();
            for (int i = 0; i < mails.length; i++) {
                mailList.add(mails[i]);
                images.add(this.imageName);
            }

            MailWorkerDirect worker = new MailWorkerDirect(mailList, images, new PathCreator().getImagePath(), config, pf);
            worker.execute();

        } else {

            try {
                String sophPath = new PathCreator().getImagePath() + "mails.soph";

                PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(sophPath, true)));
                String[] mails = jTextField2.getText().split(",");
                Date actDate = new Date();
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd");
                String dateFormat = formatter.format(actDate);
                for (String mail : mails) {
                    mail = mail.trim();
                    out.println(imageName + "," + mail + "," + dateFormat + ",0");

                }

                out.close();

            } catch (IOException e) {
                //exception handling left as an exercise for the reader
            }
        }
        //proc.destroy();
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        this.dispose();

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusGained

    }//GEN-LAST:event_jTextField2FocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
