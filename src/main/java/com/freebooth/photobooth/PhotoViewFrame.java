
/* 
 * Copyright (C) 2016 Johannes Wilke
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.freebooth.photobooth;

import com.freebooth.fileWatcher.PhotoboothFileWatcher;
import com.freebooth.utilities.BILoader;
import com.freebooth.utilities.PathCreator;
import com.freebooth.utilities.StretchIcon;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import org.apache.commons.lang3.SystemUtils;
import com.freebooth.utilities.AltTabStopper;

/**
 *
 * @author johannes
 */
public class PhotoViewFrame extends Photobooth {

    int actImageIndex;
    List<String> images;
    PathCreator pathcreator;
    Thread tfw;
    String path;
    AltTabStopper ats;
    Preferences prefs;

    /**
     * Creates new form PhotoboothForm
     *
     * @param fw
     */
    public PhotoViewFrame() {

        initComponents();
        
        pathcreator = new PathCreator();
        
        images = new CopyOnWriteArrayList<>();
        actImageIndex = -1;
        prefs = Preferences.userNodeForPackage(PhotoViewFrame.class);   
        
        getContentPane().setBackground(Color.decode(prefs.get("background_color", "#333333")));

        tfw = new Thread(new PhotoboothFileWatcher(pathcreator.getThumbPath(),this, true));
        tfw.start();
        
            
        path = pathcreator.getThumbPath();
        String labelText = imageLabel.getText();
        String[] lines = labelText.split("<br />");
        labelText = lines[0] + "<br />" + lines[1] + "<br />" + path + "<br />" + lines[2] + "<br />" + lines[3];

        imageLabel.setMaximumSize(new Dimension(prefs.getInt("image_width", 1400), prefs.getInt("image_height", 1400)));
        imageLabel.setMinimumSize(new Dimension(prefs.getInt("image_width", 1400), prefs.getInt("image_height", 1400)));
        imageLabel.setPreferredSize(new Dimension(prefs.getInt("image_width", 1400), prefs.getInt("image_height", 1400)));
        imageLabel.setText(labelText);
        System.out.println(path);

        actImageIndex = -1;

        if (prefs.getBoolean("leavepw", false)) {
            ats = AltTabStopper.create(this);
        }

    }

    public synchronized void addImage(String path) {
        images.add(path);
        if(!prefs.getBoolean("update_on_new_picture", false)) {
            actImageIndex = images.size() - 1; 
        }
        updateImage();
    }

    public synchronized void deleteImage(String path) {
        images.remove(path);

        actImageIndex = images.size() - 1;
        updateImage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        imageLabel = new javax.swing.JLabel();
        maxButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setAutoRequestFocus(false);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusable(false);
        setResizable(false);
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 10, 0, 10, 0, 10, 0};
        layout.rowHeights = new int[] {0, 10, 0, 10, 0};
        getContentPane().setLayout(layout);

        imageLabel.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        imageLabel.setForeground(java.awt.Color.white);
        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/photobooth_start.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("properties/Bundle"); // NOI18N
        imageLabel.setText(bundle.getString("PhotoViewFrame.imageLabel.text_1")); // NOI18N
        imageLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imageLabel.setIconTextGap(20);
        imageLabel.setMaximumSize(new java.awt.Dimension(1400, 800));
        imageLabel.setMinimumSize(new java.awt.Dimension(1400, 800));
        imageLabel.setName(""); // NOI18N
        imageLabel.setPreferredSize(new java.awt.Dimension(1400, 800));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 200.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(imageLabel, gridBagConstraints);

        maxButton.setText(bundle.getString("PhotoViewFrame.maxButton.text")); // NOI18N
        maxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        getContentPane().add(maxButton, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void maxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxButtonActionPerformed
        if (!SystemUtils.IS_OS_WINDOWS) {
            GraphicsDevice device = GraphicsEnvironment
            .getLocalGraphicsEnvironment().getScreenDevices()[0];
            device.setFullScreenWindow(this);
        }
        maxButton.setVisible(false);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        dispose();
        setUndecorated(true);
        setVisible(true);
    }//GEN-LAST:event_maxButtonActionPerformed

    @Override
    public boolean close() {

        setVisible(false); //you can't see me!
        dispose();
        tfw.interrupt();
        if (ats != null) {
            ats.stop();
        }
        return true;
    }

    public void updateImage() {
        //    ImageIO.setUseCache(false);
        //System.out.println(path);
        if (actImageIndex != -1) {
            if (actImageIndex >= 0) {
                imageLabel.setText("");
            }
            BufferedImage imgBI = null;
            String actPath = path + images.get(actImageIndex);
           
            BufferedImage bi = BILoader.loadImage(actPath);

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            try {
                ImageIO.write(bi, "jpg", baos);
                baos.flush();
                byte[] imageInByte = baos.toByteArray();
                baos.close();
                StretchIcon si = new StretchIcon(imageInByte);
                imageLabel.setIcon(si);
            } catch (IOException ex) {
                Logger.getLogger(PhotoViewFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    public BufferedImage toBufferedImage(Image img) {
        if (img instanceof BufferedImage) {
            return (BufferedImage) img;
        }

        // Create a buffered image with transparency
        BufferedImage bimage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);

        // Draw the image on to the buffered image
        Graphics2D bGr = bimage.createGraphics();
        bGr.drawImage(img, 0, 0, null);
        bGr.dispose();

        // Return the buffered image
        return bimage;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imageLabel;
    private javax.swing.JButton maxButton;
    // End of variables declaration//GEN-END:variables
}
